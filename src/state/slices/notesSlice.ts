import { createAsyncThunk, createSlice, PayloadAction, createSelector } from "@reduxjs/toolkit";
import { registerSelectors } from "reselect-tools";
import { RootState } from "../store";
import api from "../api";

const normalize = (data: { id: string }[]) =>
  data.reduce((results: any, u) => ((results[u.id] = u), results), {});

const getId = () => Date.now().toString();

export type Note = {
  id: string;
  title: string;
  text: string;
  pinned: boolean;
  selected: boolean;
};

export interface NotesState {
  byId: {
    [id: string]: Note;
  };
  allIds: string[];
  status: "idle" | "loading" | "failed";
}

const initialState: NotesState = {
  byId: {},
  allIds: [],
  status: "idle",
};

const fetchNotes = createAsyncThunk("notes/fetchNotes", async () => {
  const response = await api.get("notes");
  return normalize(response.data);
});

export const notesSlice = createSlice({
  name: "notes",
  initialState,
  reducers: {
    addNote: (state, action: PayloadAction<{ id: string; note: Note }>) => {
      const note = action.payload.note;
      const id = action.payload.id;

      state.byId[id] = note;
      state.allIds.push(id);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNotes.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchNotes.fulfilled, (state, action) => {
        state.status = "idle";
        state.byId = action.payload;
      });
  },
});

// Actions
const { addNote } = notesSlice.actions;
export { fetchNotes, addNote };

// Selectors
// https://github.com/reduxjs/redux-devtools/issues/352
export const notes$ = createSelector(
  (state: RootState) => state,
  (state: RootState) => Object.values(state.notes.byId)
);

export const pinnedNotes$ = createSelector(
  (state: RootState) => state,
  (state: RootState) => Object.values(state.notes.byId).filter((note) => note.pinned)
);

export const unpinnedNotes$ = createSelector(
  (state: RootState) => state,
  (state: RootState) => Object.values(state.notes.byId).filter((note) => !note.pinned)
);

registerSelectors({ notes$, pinnedNotes$, unpinnedNotes$ });

export default notesSlice.reducer;
